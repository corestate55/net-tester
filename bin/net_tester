#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rubygems'
require 'bundler'
Bundler.setup :default

# To override phut/lib/phut with net_tester/lib/phut
$LOAD_PATH.unshift File.expand_path(File.join(__dir__, '..', 'lib'))

require 'gli'
require 'net_tester'
require 'net_tester/version'
require 'phut/setting'
require 'phut/vhost'

FileUtils.mkdir_p('./log') unless File.exist?('./log')
FileUtils.mkdir_p('./tmp/pids') unless File.exist?('./tmp/pids')
FileUtils.mkdir_p('./tmp/sockets') unless File.exist?('./tmp/sockets')

Phut.log_dir = './log'
Phut.pid_dir = './tmp/pids'
Phut.socket_dir = './tmp/sockets'

module NetTester
  # net_tester command
  module App
    include Phut
    extend GLI::App

    desc 'Displays the current runtime version'
    program_desc 'Network acceptance test framework'

    version NetTester::VERSION

    desc 'Runs NetTester'
    command :run do |c|
      c.desc 'number of virtual hosts'
      c.flag [:n, :nhost]
      c.desc 'VLAN ID set to each host'
      c.flag [:vlan]
      c.desc 'device name that virtual hosts use'
      c.flag [:d, :device]
      c.desc 'dpid that physical switch uses'
      c.flag [:D, :dpid]

      c.desc 'Location to put pid files'
      c.flag [:P, :pid_dir], default_value: Trema::DEFAULT_PID_DIR
      c.desc 'Location to put log files'
      c.flag [:L, :log_dir], default_value: Trema::DEFAULT_LOG_DIR
      c.desc 'Location to put socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        Phut.pid_dir = options[:pid_dir]
        Phut.log_dir = options[:log_dir]
        Phut.socket_dir = options[:socket_dir]

        raise '--device option is mandatory' if options[:device].nil?
        raise '--dpid option is mandatory' if options[:dpid].nil?
        exit_now!('--nhost must be > 0') if options[:nhost] && options[:nhost].to_i <= 0
        exit_now!('NetTester is already running') if NetTester.running?

        NetTester.run(network_device: options[:device],
                      physical_switch_dpid: options[:dpid].hex,
                      vlan: options[:vlan])
        NetTester.add_host options[:nhost].to_i if options[:nhost]
      end
    end

    desc 'Add a patch'
    command :add do |c|
      c.desc 'port number of virtual switch'
      c.flag [:vport]
      c.desc 'port number of physical switch'
      c.flag [:port]
      c.desc 'Location to find socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        Phut.socket_dir = options[:socket_dir]
        exit_now!('NetTester is not running') unless NetTester.running?
        raise '--vport option is mandatory' if options[:vport].nil?
        raise '--port option is mandatory' if options[:port].nil?
        if options[:vport].to_i > Vhost.all.size + 1
          exit_now!("#{options[:vport]}: no such virtual port")
        end
        if options[:vport].to_i < 1
          exit_now!("#{options[:vport]}: invalid virtual port")
        end
        if options[:port].to_i > Vhost.all.size + 1
          exit_now!("#{options[:port]}: no such port")
        end
        exit_now!("#{options[:port]}: invalid port") if options[:port].to_i < 1

        NetTester.add options[:vport].to_i, options[:port].to_i
      end
    end

    desc 'Delete a patch'
    command :delete do |c|
      c.desc 'port number of virtual switch'
      c.flag [:vport]
      c.desc 'port number of physical switch'
      c.flag [:port]
      c.desc 'Location to find socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        Phut.socket_dir = options[:socket_dir]
        exit_now!('NetTester is not running') unless NetTester.running?
        raise '--vport option is mandatory' if options[:vport].nil?
        raise '--port option is mandatory' if options[:port].nil?
        if options[:vport].to_i > Vhost.all.size
          exit_now!("#{options[:vport]}: no such virtual port")
        end
        if options[:vport].to_i < 0
          exit_now!("#{options[:vport]}: invalid virtual port")
        end
        if options[:port].to_i > Vhost.all.size
          exit_now!("#{options[:port]}: no such port")
        end
        exit_now!("#{options[:port]}: invalid port") if options[:port].to_i < 0

        NetTester.delete options[:vport].to_i, options[:port].to_i
      end
    end

    desc 'Send an UDP packet'
    command :send do |c|
      c.desc 'host that sends packets'
      c.flag [:s, :source]
      c.desc 'host that receives packets'
      c.flag [:d, :dest]
      c.desc 'Location to find socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        Phut.socket_dir = options[:socket_dir]
        exit_now!('NetTester is not running') unless NetTester.running?
        exit_now! '--source option is mandatory' if options[:source].nil?
        exit_now! '--dest option is mandatory' if options[:dest].nil?
        unless Vhost.find_by(name: options[:source])
          exit_now! %(#{options[:source]}: no such host)
        end
        unless Vhost.find_by(name: options[:dest])
          exit_now! %(#{options[:dest]}: no such host)
        end

        NetTester.send_packet options[:source], options[:dest]
      end
    end

    desc 'Show received packets'
    arg_name 'host'
    command :stats do |c|
      c.desc 'Location to find socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_golbal_options, options, args|
        Phut.socket_dir = options[:socket_dir]
        exit_now!('NetTester is not running') unless NetTester.running?
        help_now!('host is required') if args.empty?
        host = args.first
        exit_now! %(#{host}: no such host) unless Vhost.find_by(name: host)

        sent_desc = ''
        Vhost.all.each do |each|
          next if host == each.name
          npacket = NetTester.packets_sent(host, each.name)
          sent_desc += "  #{host} -> #{each.name} = #{npacket} packet" if npacket > 0
        end
        puts "Packets sent:\n#{sent_desc}" unless sent_desc.empty?

        received_desc = ''
        Vhost.all.each do |each|
          next if host == each.name
          npacket = NetTester.packets_received(host, each.name)
          received_desc += "  #{each.name} -> #{host} = #{npacket} packet" if npacket > 0
        end
        puts "Packets received:\n#{received_desc}" unless received_desc.empty?
      end
    end

    desc 'Kills NetTester'
    command :kill do |c|
      c.desc 'Location to find socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        Phut.socket_dir = options[:socket_dir]
        NetTester.kill
      end
    end

    exit run(ARGV)
  end
end
