#!/usr/bin/env ruby
# frozen_string_literal: true
require 'rubygems'
require 'bundler'
Bundler.setup :default

# To override phut/lib/phut with net_tester/lib/phut
$LOAD_PATH.unshift File.expand_path(File.join(__dir__, '..', 'lib'))

require 'gli'
require 'net_tester/command'
require 'phut/host'

module NetTester
  # net_tester command
  module App
    include Phut
    extend GLI::App

    desc 'Runs NetTester'
    command :run do |c|
      c.desc 'number of virtual hosts'
      c.flag [:n, :nhost]
      c.desc 'VLAN ID set to each host'
      c.flag [:vlan]
      c.desc 'device name that virtual hosts use'
      c.flag [:d, :device]
      c.desc 'dpid that physical switch uses'
      c.flag [:D, :dpid]

      c.action do |_global_options, options, _args|
        raise '--nhost option is mandatory' if options[:nhost].nil?
        raise '--device option is mandatory' if options[:device].nil?
        raise '--dpid option is mandatory' if options[:dpid].nil?
        exit_now!('--nhost must be > 0') if options[:nhost].to_i <= 0
        exit_now!('NetTester is already running') if Command.running?

        Command.run options[:nhost].to_i, options[:dpid].hex, options[:vlan]
        Command.connect_switch(device: options[:device], port_number: options[:nhost].to_i + 1)
      end
    end

    desc 'Add a patch'
    command :add do |c|
      c.desc 'port number of virtual switch'
      c.flag [:vport]
      c.desc 'port number of physical switch'
      c.flag [:port]

      c.action do |_global_options, options, _args|
        exit_now!('NetTester is not running') unless Command.running?
        raise '--vport option is mandatory' if options[:vport].nil?
        raise '--port option is mandatory' if options[:port].nil?
        if options[:vport].to_i > Host.all.size
          exit_now!("#{options[:vport]}: no such virtual port")
        end
        if options[:vport].to_i < 0
          exit_now!("#{options[:vport]}: invalid virtual port")
        end
        if options[:port].to_i > Host.all.size
          exit_now!("#{options[:port]}: no such port")
        end
        if options[:port].to_i < 0
          exit_now!("#{options[:port]}: invalid port")
        end

        Command.add options[:vport].to_i, options[:port].to_i
      end
    end

    desc 'Delete a patch'
    command :delete do |c|
      c.desc 'port number of virtual switch'
      c.flag [:vport]
      c.desc 'port number of physical switch'
      c.flag [:port]
      c.action do |_global_options, options, _args|
        exit_now!('NetTester is not running') unless Command.running?
        raise '--vport option is mandatory' if options[:vport].nil?
        raise '--port option is mandatory' if options[:port].nil?
        if options[:vport].to_i > Host.all.size
          exit_now!("#{options[:vport]}: no such virtual port")
        end
        if options[:vport].to_i < 0
          exit_now!("#{options[:vport]}: invalid virtual port")
        end
        if options[:port].to_i > Host.all.size
          exit_now!("#{options[:port]}: no such port")
        end
        if options[:port].to_i < 0
          exit_now!("#{options[:port]}: invalid port")
        end

        Command.delete options[:vport].to_i, options[:port].to_i
      end
    end

    desc 'Send an UDP packet'
    command :send do |c|
      c.desc 'host that sends packets'
      c.flag [:s, :source]
      c.desc 'host that receives packets'
      c.flag [:d, :dest]

      c.action do |_global_options, options, _args|
        exit_now!('NetTester is not running') unless Command.running?
        exit_now! '--source option is mandatory' if options[:source].nil?
        exit_now! '--dest option is mandatory' if options[:dest].nil?
        unless Host.find_by(name: options[:source])
          exit_now! %(#{options[:source]}: no such host)
        end
        unless Host.find_by(name: options[:dest])
          exit_now! %(#{options[:dest]}: no such host)
        end

        Command.send_packet options[:source], options[:dest]
      end
    end

    desc 'Show received packets'
    arg_name 'host'
    command :stats do |c|
      c.action do |_golbal_options, _options, args|
        exit_now!('NetTester is not running') unless Command.running?
        help_now!('host is required') if args.empty?
        host = args.first
        unless Host.find_by(name: host)
          exit_now! %(#{host}: no such host)
        end

        sent_desc = ''
        Host.all.each do |each|
          next if host == each.name
          npacket = Command.packets_sent(host, each.name)
          sent_desc += "  #{host} -> #{each.name} = #{npacket} packet" if npacket > 0
        end
        puts "Packets sent:\n#{sent_desc}" unless sent_desc.empty?

        received_desc = ''
        Host.all.each do |each|
          next if host == each.name
          npacket = Command.packets_received(host, each.name)
          received_desc += "  #{each.name} -> #{host} = #{npacket} packet" if npacket > 0
        end
        puts "Packets received:\n#{received_desc}" unless received_desc.empty?
      end
    end

    desc 'Kills NetTester'
    command :kill do |c|
      c.action do |_global_options, _options, _args|
        Command.kill
      end
    end

    exit run(ARGV)
  end
end
