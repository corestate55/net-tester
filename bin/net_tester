#!/usr/bin/env ruby
# frozen_string_literal: true
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'rubygems'
require 'bundler'
Bundler.setup :default

require 'active_support/core_ext/array/access'
require 'faker'
require 'gli'
require 'net_tester'
require 'trema'

module NetTester
  # net_tester command
  module App
    extend GLI::App
    extend NetTester::Dir
    include NetTester

    desc 'Runs NetTester'
    command :run do |c|
      c.desc 'number of virtual hosts'
      c.flag [:n, :nhost]
      c.desc 'device name that virtual hosts use'
      c.flag [:D, :device]

      c.action do |_global_options, options, _args|
        raise '--nhost option is mandatory' if options[:nhost].nil?
        raise '--device option is mandatory' if options[:device].nil?

        nhost = options[:nhost].to_i
        controller_file = File.expand_path File.join(__dir__, '..', 'lib', 'net_tester', 'controller.rb')
        system("bundle exec trema run #{controller_file} -L #{log_dir} -P #{pid_dir} -S #{socket_dir} --daemon -- #{nhost}") || raise('Failed to start NetTester')

        @test_switch = TestSwitch.create(dpid: 0xabc)

        ip_address = Array.new(nhost) { Faker::Internet.ip_v4_address }
        mac_address = Array.new(nhost) { Faker::Internet.mac_address }
        arp_entries = ip_address.zip(mac_address).map { |each| each.join('/') }.join(',')
        nhost.times do |host_id|
          link = Link.create
          Host.create(name: "host#{host_id + 1}",
                      ip_address: ip_address[host_id],
                      mac_address: mac_address[host_id],
                      device: link.devices.first,
                      arp_entries: arp_entries)
          @test_switch.add_port(link.devices.second)
        end
        @test_switch.add_port(options[:device])
      end
    end

    desc 'Add a patch'
    command :add do |c|
      c.desc 'port number of virtual switch'
      c.flag [:vport]
      c.desc 'port number of physical switch'
      c.flag [:port]

      c.action do |_global_options, options, _args|
        raise '--vport option is mandatory' if options[:vport].nil?
        raise '--port option is mandatory' if options[:port].nil?

        Trema.trema_process('NetTester', socket_dir).controller
             .create_patch(options[:vport].to_i, options[:port].to_i)
      end
    end

    desc 'Send packet'
    command :send_packet do |c|
      c.desc 'host that sends packets'
      c.flag [:s, :source]
      c.desc 'host that receives packets'
      c.flag [:d, :dest]

      c.action do |_global_options, options, _args|
        raise '--source option is mandatory' if options[:source].nil?
        raise '--dest option is mandatory' if options[:dest].nil?

        source = Host.find_by(name: options[:source])
        dest = Host.find_by(name: options[:dest])
        source.send_packet(dest)
      end
    end

    desc 'Show received packets'
    command :received_packets do |c|
      c.desc 'host that sends packets'
      c.flag [:s, :source]
      c.desc 'host that receives packets'
      c.flag [:d, :dest]

      c.action do |_global_options, options, _args|
        raise '--source option is mandatory' if options[:source].nil?
        raise '--dest option is mandatory' if options[:dest].nil?

        dest = Host.find_by(name: options[:dest])
        source = Host.find_by(name: options[:source])
        puts dest.packets_received_from(source).size
      end
    end

    exit run(ARGV)
  end
end
