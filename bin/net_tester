#!/usr/bin/env ruby
# frozen_string_literal: true
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'rubygems'
require 'bundler'
Bundler.setup :default

require 'gli'
require 'net_tester/command'

module NetTester
  # net_tester command
  module App
    extend GLI::App

    desc 'Runs NetTester'
    command :run do |c|
      c.desc 'number of virtual hosts'
      c.flag [:n, :nhost]
      c.desc 'device name that virtual hosts use'
      c.flag [:D, :device]
      c.desc 'VLAN ID set to each host'
      c.flag [:vlan]

      c.action do |_global_options, options, _args|
        raise '--nhost option is mandatory' if options[:nhost].nil?
        raise '--device option is mandatory' if options[:device].nil?

        Command.run options[:device], options[:nhost].to_i, options[:vlan]
      end
    end

    desc 'Add a patch'
    command :add do |c|
      c.desc 'port number of virtual switch'
      c.flag [:vport]
      c.desc 'port number of physical switch'
      c.flag [:port]

      c.action do |_global_options, options, _args|
        raise '--vport option is mandatory' if options[:vport].nil?
        raise '--port option is mandatory' if options[:port].nil?

        Command.add options[:vport].to_i, options[:port].to_i
      end
    end

    desc 'Send packet'
    command :send_packet do |c|
      c.desc 'host that sends packets'
      c.flag [:s, :source]
      c.desc 'host that receives packets'
      c.flag [:d, :dest]

      c.action do |_global_options, options, _args|
        raise '--source option is mandatory' if options[:source].nil?
        raise '--dest option is mandatory' if options[:dest].nil?

        Command.send_packet options[:source], options[:dest]
      end
    end

    desc 'Show received packets'
    command :stats do |c|
      c.action do |_global_options, _options, args|
        sent_desc = ''
        NetTester::Host.all.each do |each|
          next if args.first == each.name
          npacket = Command.packets_sent(args.first, each.name)
          sent_desc += "  #{args.first} -> #{each.name} = #{npacket} packet" if npacket > 0
        end
        puts "Packets sent:\n#{sent_desc}" unless sent_desc.empty?

        received_desc = ''
        NetTester::Host.all.each do |each|
          next if args.first == each.name
          npacket = Command.packets_received(args.first, each.name)
          received_desc += "  #{each.name} -> #{args.first} = #{npacket} packet" if npacket > 0
        end
        puts "Packets received:\n#{received_desc}" unless received_desc.empty?
      end
    end

    desc 'Kills NetTester'
    command :kill do |c|
      c.action do |_global_options, _options, _args|
        Command.kill
      end
    end

    exit run(ARGV)
  end
end
